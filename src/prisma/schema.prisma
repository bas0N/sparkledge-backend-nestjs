generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL2")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  firstName       String
  lastName        String
  password        String
  temporaryToken  String?
  refreshToken    String?
  viewedDocuments String[]
  isVerified      Boolean      @default(false)
  registeredBy    RegisteredBy @default(EMAIL)
  comments        Comment[]
  documents       Document[]
  reports         Report[]
  role            Role @default(USER)
  facebookUrl String @default("")
  instagramUrl String @default("")
  linkedinUrl String @default("")
  pinterestUrl String @default("")
  description String @default("")
  joinedAt    DateTime   @default(now())
}

model Moderators {
  id String @unique @id @default(uuid())
  email String @unique
}
model University {
  name       String
  id         Int         @id @default(autoincrement())
  courses    Course[]
  documents  Document[]
  faculties  Faculty[]
  programmes Programme[]
}

model Faculty {
  name         String
  id           Int         @id @default(autoincrement())
  universityId Int
  university   University  @relation(fields: [universityId], references: [id])
  courses      Course[]
  documents    Document[]
  programmes   Programme[]
}

model Programme {
  name         String
  id           Int        @id @default(autoincrement())
  facultyId    Int
  universityId Int
  faculty      Faculty    @relation(fields: [facultyId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  courses      Course[]
  documents    Document[]
}

model Course {
  name         String
  semester     Int
  id           Int        @id @default(autoincrement())
  programmeId  Int
  facultyId    Int
  universityId Int
  courseType   CourseType
  degree       Degree
  faculty      Faculty    @relation(fields: [facultyId], references: [id])
  programme    Programme  @relation(fields: [programmeId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  documents    Document[]
}

model Document {
  courseId     Int
  id           Int        @id @default(autoincrement())
  programmeId  Int
  facultyId    Int
  universityId Int
  title        String
  userId       String
  description  String
  fileId       Int
  viewsNumber  Int        @default(0)
  likesList    String[]
  likesNumber  Int        @default(0)
  createdAt    DateTime   @default(now())
  course       Course     @relation(fields: [courseId], references: [id])
  faculty      Faculty    @relation(fields: [facultyId], references: [id])
  file         File       @relation(fields: [fileId], references: [id])
  programme    Programme  @relation(fields: [programmeId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  comments     Comment[]
  reports      Report[]
}

model File {
  id        Int        @id @default(autoincrement())
  key       String     @unique
  documents Document[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  userId      String
  documentId  Int
  likesNumber Int      @default(0)
  createdAt   DateTime @default(now())
  document    Document @relation(fields: [documentId], references: [id])
  author      User     @relation(fields: [userId], references: [id])
}

model Report {
  id               String     @id @default(uuid())
  reportType       ReportType
  userId           String
  documentId       Int
  content          String     @default("no-content")
  createdAt        DateTime   @default(now())
  documentReported Document   @relation(fields: [documentId], references: [id])
  personReporting  User       @relation(fields: [userId], references: [id])
}
enum Role {
  ADMIN
  MODERATOR
  USER
}

enum CourseType {
  FACULTATIVE
  OBLIGATORY
}

enum Degree {
  BACHELOR
  MASTER
  PHD
}



enum RegisteredBy {
  EMAIL
  GOOGLE
}

enum ReportType {
  MINECOPYRIGHTSVIOLATION
  SOMEONESCOPYRIGHTSVIOLATION
  HATEFULCONTENT
  INAPPROPRIATECONTENT
  SEXUALCONTENT
  OTHER
}

